rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Users collection
    // Allow authenticated users to read public profiles (is_private == false) OR their own profile.
    // Write only permitted to the owner of the document.
    match /users/{userId} {
      // Individual document reads (get) - check privacy
      allow get: if request.auth != null && (
        resource.data.is_private == false || request.auth.uid == userId
      );
      // List queries need broader permission for whereIn queries to work
      allow list: if request.auth != null;
      allow create, update, delete: if request.auth != null && request.auth.uid == userId;
    }

    // Wishlists - users can read public ones, but only modify their own
    match /wishlists/{wishlistId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null &&
        request.resource.data.owner_id == request.auth.uid;
      allow update, delete: if request.auth != null &&
        resource.data.owner_id == request.auth.uid;
    }

    // Wish items - write permitted to wishlist owner (transitional support if owner_id missing)
    match /wish_items/{itemId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && (
        // Creating: trust wishlist ownership
        (resource == null &&
          get(/databases/$(database)/documents/wishlists/$(request.resource.data.wishlist_id)).data.owner_id == request.auth.uid)
        ||
        // Existing doc already has explicit owner_id
        (resource != null && resource.data.owner_id == request.auth.uid)
        ||
        // Transitional: fallback to wishlist ownership if owner_id absent or different
        (resource != null &&
          get(/databases/$(database)/documents/wishlists/$(resource.data.wishlist_id)).data.owner_id == request.auth.uid)
      );
    }

    // Wish item statuses - users can read all, but only modify their own
    match /wish_item_statuses/{statusId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null &&
        request.resource.data.user_id == request.auth.uid;
      allow update, delete: if request.auth != null &&
        resource.data.user_id == request.auth.uid;
    }

    // Friendships - users can read all, but only modify their own
    match /friendships/{friendshipId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null &&
        (resource == null || resource.data.user_id == request.auth.uid || resource.data.friend_id == request.auth.uid);
    }

    // Friends - users can read all, but only modify their own
    match /friends/{friendId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null &&
        (resource == null || resource.data.user_id == request.auth.uid || resource.data.friend_id == request.auth.uid);
    }

    // User Favorites - users can read and write their own favorites
    match /user_favorites/{favoriteId} {
      allow read: if request.auth != null && resource.data.user_id == request.auth.uid;
      allow write: if request.auth != null && (resource == null || resource.data.user_id == request.auth.uid);
    }

    // Analytics and monitoring - only system can write, users can read their own
    match /user_interactions/{interactionId} {
      allow read: if request.auth != null && resource.data.user_id == request.auth.uid;
      allow write: if request.auth != null;
    }

    match /analytics_events/{eventId} {
      allow read: if request.auth != null && resource.data.user_id == request.auth.uid;
      allow write: if request.auth != null;
    }

    // Usage monitoring - only readable by authenticated users
    match /_usage/{document} {
      allow read: if request.auth != null;
      allow write: if false; // Only Cloud Functions can write usage stats
    }

    // Performance metrics
    match /performance_metrics/{metricId} {
      allow read: if request.auth != null && resource.data.user_id == request.auth.uid;
      allow write: if request.auth != null;
    }

    // Request and error logs
    match /request_logs/{logId} {
      allow read: if request.auth != null && resource.data.user_id == request.auth.uid;
      allow write: if request.auth != null;
    }

    match /error_logs/{logId} {
      allow read: if request.auth != null && resource.data.user_id == request.auth.uid;
      allow write: if request.auth != null;
    }
  }
}